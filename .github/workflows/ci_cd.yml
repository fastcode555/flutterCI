# 这是GitHub Actions的工作流配置文件
# 当你推送代码或者创建标签时，这个工作流就会被触发
name: CI/CD with Flutter

on:
  # 当代码被推送到任意分支时，或者有新的Pull Request时，触发工作流
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

    tags:
      - 'v*'  # 当推送的标签名以v开头时，触发工作流，这常用于发布新版本

jobs: # 定义了一系列的工作，这些工作可以并行执行，也可以按照依赖顺序执行
  build_and_test: # 这是第一个工作的名称，你可以自行定义
    # 工作运行的环境
    runs-on: ubuntu-latest
    # 工作中的步骤，步骤会按照从上到下的顺序执行
    steps:
      - name: Checkout code  # 第一步，检出代码
        uses: actions/checkout@v2

      - name: Setup Flutter  # 第二步，设置Flutter环境
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.13.9'  # 指定Flutter版本号

      - name: Check Flutter Version
        run: flutter --version

      - name: Install dependencies  # 第三步，安装依赖
        run: flutter pub get

      - name: Run tests  # 第四步，运行测试
        run: flutter test

      - name: Extract project info #获取工程的信息
        id: project_info
        run: |
          echo "project_name=$(grep -o "name: [a-zA-Z_]*" pubspec.yaml | awk '{print $2}')" >> $GITHUB_ENV
          echo "version=$(grep -o "version: [0-9.]*" pubspec.yaml | awk '{print $2}')" >> $GITHUB_ENV
          echo "build_time=$(date +"%Y-%m-%d")" >> $GITHUB_ENV

      - name: Build APK  #构建APK
        run: |
          flutter build apk --release
          mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/${{ env.project_name }}-android-release-${{ env.version }}-${{ env.build_time }}.apk

      - name: Archive production artifacts  # 第六步，归档产物，你可以在Actions的界面下载到这个文件
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.project_name }}-android-release-${{ env.version }}-${{ env.build_time }}
          path: build/app/outputs/flutter-apk/${{ env.project_name }}-android-release-${{ env.version }}-${{ env.build_time }}.apk

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.version }}-${{ env.build_time }}
          release_name: Release ${{ env.version }}-${{ env.build_time }}
          body: |
            Release notes and changelog go here.

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/${{ env.project_name }}-android-release-${{ env.version }}-${{ env.build_time }}.apk
          asset_name: "${{ env.project_name }}-android-release-${{ env.version }}-${{ env.build_time }}.apk"
          asset_content_type: application/octet-stream

  build_ios:
    runs-on: macos-latest  # 注意这里选择了macOS环境
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.13.9'

      - name: Check Flutter Version
        run: flutter --version

      - name: Install dependencies
        run: flutter pub get

      - name: Extract project info
        id: extract_info
        run: |
          echo "project_name=$(grep -o "name: [a-zA-Z_]*" pubspec.yaml | awk '{print $2}')" >> $GITHUB_ENV
          echo "version=$(grep -o "version: [0-9.]*" pubspec.yaml | awk '{print $2}')" >> $GITHUB_ENV
          echo "build_time=$(date +"%Y-%m-%d")" >> $GITHUB_ENV

      - name: Build iOS  # 构建iOS版本
        run: |
          flutter build ios --release --no-codesign
          mv build/ios/iphoneos/Runner.app build/ios/iphoneos/${{ env.project_name }}-ios-release-${{ env.version }}-${{ env.build_time }}.app

      - name: Archive iOS
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.project_name }}-ios-release-${{ env.version }}-${{ env.build_time }}
          path: build/ios/iphoneos/${{ env.project_name }}-ios-release-${{ env.version }}-${{ env.build_time }}.app  # iOS应用的路径

#  deploy: # 这是第二个工作的名称，你可以自行定义
#    # 这个工作需要在build_and_test工作成功后才会运行
#    needs: build_and_test
#    runs-on: ubuntu-latest
#    steps:
#      - name: Download APK artifact
#        uses: actions/download-artifact@v2
#        with:
#          name: ${{ needs.build.outputs.project_info.project_name }}-android-release-${{ needs.build.outputs.project_info.version }}-${{ needs.build.outputs.project_info.build_time }}
#          path: build/app/outputs/flutter-apk/
#
#      - name: Upload APK to GitHub Releases
#        uses: actions/upload-release-asset@v1
#        with:
#          repo_token: ${{ secrets.GITHUB_TOKEN }}
#          file: build/app/outputs/flutter-apk/${{ needs.build.outputs.project_info.project_name }}-android-release-${{ needs.build.outputs.project_info.version }}-${{ needs.build.outputs.project_info.build_time }}.apk
#          asset_name: "${{ needs.build.outputs.project_info.project_name }}-android-release-${{ needs.build.outputs.project_info.version }}-${{ needs.build.outputs.project_info.build_time }}.apk"
#          tag: ${{ github.ref }}
